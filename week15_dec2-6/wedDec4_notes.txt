General announcements:
- NO late work accepted after Friday, December 6 (includes milestones and tutorials)
    --> This includes correcting any Milestone 10/11 submissions where 
        your release contained the wrong code

- Milestone 12 must be checked off in class or office hours (not Canvas)
- Website design competition - submit new release by Friday, December 6
    winner gets sandwich (Goodcents?) gift card



///////////////////

Final exam.
    1:30 section - Wednesday, December 11 11:50 am - 1:40 pm (usual lab room)
    2:30 section - Friday, December 13 4:10-6:00 pm (usual lab room)

Format.
    Paper-based, closed notes, closed computers.
    Multiple choice followed by open-ended.
    Similar format as midterms

--> be familiar with all vocabulary terms

--> I highly recommend reviewing exams 1 and 2 and their practice exams



/////////////////////////////////////

For open-ended:
- Implementing a class, including fields/properties/methods/constructors  
- Creating and using objects
    ClassName obj = new ClassName() {PropertyName = value};


- Writing and implementing an interface
- Using inheritance and abstract classes
- Enforcing the bounds of a property - would need private backing field
- Drawing and interpreting UML diagrams
- Implementing INotifyPropertyChanged - declaring the event, invoking as needed
- Events, including custom events, custom event arguments, invoking events, 
    attaching event handlers to events, and using events to send messages 
    between objects
- Writing Fact and Theory xUnit tests
    (Equals, True, False, Contains, PropertyChanged)    
- LINQ queries for filtering
    Where, OrderBy, OrderByDescending


--> No questions on XAML, Razor Pages, CSS, HTML


//////////////////////////////////

General review:


Encapsulation --> 
    defining a class with related information and actions


Defining a class -->
    when do we need a constructor?

    constructor?  must include if writing child class and the parent   
        constructor takes parameters

        include one if you want to require information when creating an object

        put more involved initialization code there


    public class Parent{
        public Parent(int something) {...}
    }

    public class Child {
        public Child() : base() {}
    }

    when do we need a static constructor?
        gets called when we first use that class

        put initialization code that is more involved that you want to happen
            before anything else

        static constructor in non-static class? yes
            can only access static members
            can initialize everything that is static before objects are created


Polymorphism --> 
    many forms
    FountainDrink - IMenuItem, Drink, FountainDrink, object, INotifyPropertyChanged



Inheritance --> example? 
        Entree class
        ClubSub, CaliforniaClubWrap, ... extended Entree
        eliminate code duplication - put common code in parent
        might list a feature (like Price) that they should all have, but
            then implement in a different way

    why? 
    different names for each class?
        parent/super/base
        child/sub/dierived

    how to implement methods/properties differently?
        child class uses the word override
        parent class uses the word virtual

    how do constructors work?
    rules when extending a class?


    public class Animal {
        private string _name;

        public Animal(string n) {
            _name = n;
        }

        public void Talk {
            Console.WriteLine("words");
        }
    }

    public class Dog: Animal {
        public Dog() : base("Fido") {}
    }

    public class Collie: Dog {

    }

Animal a = new Dog(); //all Dogs are Animals
Dog d = a; //NO! a has type Animal, Animals aren't necessary Dogs

would need to cast




Interfaces - why?

    impose requirements on classes that implement it


    if I am implementing the interface:
        must include all methods/properties from interface
        don't have to provide implementation - could leave abstract
            if any are abstract, then the class itself must be labeled abstract


Abstract classes --> how different from interfaces?
    some things might be abstract, some things might be fully implemented

    rules when extending an abstract class?

    public abstract class Example {
        public abstract void DoStuff();
    }

    public class Child : Example {
       //must either override DoStuff
       //or mark Child as abstract 
    }

    what does an abstract class need to do when implementing an interface?


Events
Data binding
MVVM

Field
Method
Property --> difference from field? types of accessors? 
    bounds, calculation - use a property
    do something different in child vs parent

public
protected --> where visible? 
private
static --> how do we use?

Implicit casting --> when?
    Examples:
        Animal a = new Dog(); //a Dog already is an Animal, don't need to do anything

Explicit casting --> different ways. When is it needed?
    Animal a = new Dog();

    Dog d = (Dog) a; //need to force since all Animals aren't Dogs

    Dog d = a as Dog;


virtual --> places used? behavior?

abstract --> places used? behavior?

override --> when can we say this?

as - what kind of thing is this? 

is - what kind of thing is this? 
    see if an object is a particular type
    type checking

    if (a is Dog d) <-- checks and casts


enum --> know how to declare, use

/////////////////////////

public interface IInterface {
    void Method1(params);
}

public abstract class AbstractClass {
    public void FinishedMethod() {
        Console.WriteLine("is done");
    }

    public virtual void Method2() {
        Console.WriteLine("parent");
    }

    public abstract void AbstractMethod(params);
}

public class ChildClass : AbstractClass, IInterface {
    public override void AbstractMethod(params) {
        Console.WriteLine("code");
    }

    public override void Method2() {
        Console.WriteLine("child");
    }

    public void Method1(params) {
        Console.WriteLine("done");
    }
}

AbstractClass c = new ChildClass();
c.Method2(); // child


<-- is the word "override" required for AbstractMethod?


ChildClass c = new ChildClass();
c.FinishedMethod(); //can we do this? yes! prints is done

//////////////////

Look at UML of student information.

--> assume _students is already initialized

--> complete StudentRegistry members using LINQ

--> Honor roll = 3.5 and up

public IEnumerable<Student> HonorRoll => _students.Where(s => s.GPA >= 3.5);


--> search by name: see if search string in first OR last name


--> how to write method that gets all freshmen on the honor roll?

/////////////////

--> see pie UML


Add the appropriate UML associations to the diagram. 
We want to indicate that PaleozoicPie implements INotifyPropertyChanged and IOrderItem.


Write the PaleozoicPie class definition.
- Description should be the filling followed by “Paleozoic Pie.” 
- A Paleozoic Pie is $3.00 plus an additional $1 when served with ice cream (a la mode)
- Instructions should include “Hot” if the pie is hot and 
    “A La Mode” if the pie is served a la mode.