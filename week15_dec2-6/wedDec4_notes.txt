General announcements:
- NO late work accepted after Friday, December 6 (includes milestones and tutorials)
    --> This includes correcting any Milestone 10/11 submissions where your 
        release contained the wrong branch

- Milestone 12 must be checked off in class or office hours (not Canvas)
- Website design competition - submit new release by Friday, December 6
    winner gets sandwich (Goodcents?) gift card


Hack K-State participants/volunteers

///////////////////

Final exam.
    1:30 section - Wednesday, December 11 11:50 am - 1:40 pm (usual lab room)
    2:30 section - Friday, December 13 4:10-6:00 pm (usual lab room)

Format.
    Paper-based, closed notes, closed computers.
    Multiple choice followed by open-ended.
    Similar format as midterms

--> be familiar with all vocabulary terms

--> I highly recommend reviewing exams 1 and 2 and their practice exams



/////////////////////////////////////

For open-ended:
- Implementing a class, including fields/properties/methods/constructors  
- Creating and using objects
    ClassName obj = new(...) {PropertyName = value};

- Writing and implementing an interface
- Using inheritance and abstract classes
- Enforcing the bounds of a property
    (have a private backing field)

- Drawing and interpreting UML diagrams

- Implementing INotifyPropertyChanged
- Events, including custom events, custom event arguments, invoking events, 
    attaching event handlers to events, and using events to send messages 
    between objects
- Writing Fact and Theory xUnit tests
    (Equals, True, False, Contains, PropertyChanged)    
- LINQ queries for filtering
    Where, OrderBy, OrderByDescending


--> No questions on XAML, Razor Pages, CSS, HTML


//////////////////////////////////

General review:


Encapsulation --> 
    related information you wanted to store, actions - separate into a class


Defining a class -->
    when do we need a constructor?
        if we want to force that certain properties/fields get initialized
        if you have more involved code that you want to be sure to requirements
        we MUST include a constructor if we are writing a child class that
            extends a parent with a non-default constructor

    when do we need a static constructor?
        whenever that class is first used, static constructor runs automatically
        when we have things we want to create initially, want to only do once

        we can put a static constructor in a static OR a regular class
            can only access static members (fields or properties)


Polymorphism --> 
    many forms
    a particular object can be treated as many different types

    FountainDrink object
    object, Drink, IMenuItem, FountainDrink, INotifyPropertyChanged



Inheritance --> example? why? 
    prevent code duplication
    Entree - ClubSub, CaliforniaClubWrap
    same: Calories, PrepInfo.
    related: Price

    different names for each class?
        parent/base/super
        child/sub/derived

    how to implement methods/properties differently?
        put the word override in the child
        parent class must have virtual or abstract


    how do constructors work?
    rules when extending a class?


    public class Animal {
        private string _name;

        public Animal(string n) {
            _name = n;
        }

        public virtual void Talk() {
            Console.WriteLine("words");
        }
    }

    public class Dog: Animal {
        public Dog() : base("Fido") {

        }

        public override void Talk() {
            Console.WriteLine("woof");
        }
    }

    public class Collie: Dog {
        
    }

Animal d = new Dog();
d.Talk(); //woof


Interfaces - why?

    impose requirements on classes that implement it

    if we implement an interface, must include:
    signatures of everything in the interface

    don't have to provide code for each item 
        - but if we don't, must mark that property/method as abstract
        - and the class itself also must be abstract


Abstract classes --> how different from interfaces?
    can't instantiate either of them
    abstract classes can have some members that are fully implemented,
        some that are abstract

    rules when extending an abstract class?

        public abstract class Example {
            public abstract void Stuff();
        }

        public class Child : Example {
            //either must override Stuff or must be abstract
        }

    what does an abstract class need to do when implementing an interface?



Events
Data binding - synchronization between front end and back end

MVVM
    View has access to ViewModel
    ViewModel has access to Model

Field
Method
Property --> difference from field? types of accessors? 
    do more involved calculation, enforce bounds
    easy to override property in child if I want it to work differently 

public
protected --> where visible? 
private
static --> how do we use?

Implicit casting --> when?
    Examples:
    all Dogs are Animals

    Animal a = new Dog();

    Dog d = a; //NO! not all animals are dogs


Explicit casting --> different ways. When is it needed?
    Dog d = (Dog)a; 
    Dog d = a as Dog;

virtual --> places used? behavior?

abstract --> places used? behavior?

override --> when can we say this?

as - what kind of thing is this? 

is - what kind of thing is this? 
    checks if it is a particular type
    type check



enum --> know how to declare, use

/////////////////////////

public interface IInterface {
    void Method1(params);
}

public abstract class AbstractClass : IInterface {
    public void FinishedMethod() {
        Console.WriteLine("is done");
    }

    public abstract void AbstractMethod(params);

    public abstract void Method1();
}

public class ChildClass : AbstractClass {
    public override void AbstractMethod(params) {
        Console.WriteLine("code");
    }

    public override void Method1(params) {
        Console.WriteLine("done");
    }
}

<-- is the word "override" required for AbstractMethod?


ChildClass c = new ChildClass();
c.FinishedMethod(); //can we do this?

//////////////////

Look at UML of student information.

--> assume _students is already initialized

--> complete StudentRegistry members using LINQ

--> Honor roll = 3.5 and up

--> search by name: see if search string in first OR last name


--> how to write method that gets all freshmen on the honor roll?

/////////////////

--> see pie UML


Add the appropriate UML associations to the diagram. 
We want to indicate that PaleozoicPie implements INotifyPropertyChanged and IOrderItem.


Write the PaleozoicPie class definition.
- Description should be the filling followed by “Paleozoic Pie.” 
- A Paleozoic Pie is $3.00 plus an additional $1 when served with ice cream (a la mode)
- Instructions should include “Hot” if the pie is hot and 
    “A La Mode” if the pie is served a la mode.