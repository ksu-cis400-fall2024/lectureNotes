Milestone 10: due Friday


Recommended order of approach:
- Add About page and edit Privacy page
- Write the static Menu class (SubHero.Data)
- Write the index page to get the menu information to *appear*
- Testing
- UML
- Styling

//////////////////////////////////


Testing: static Menu class

For each type of menu item (Entrees, Sides, Drinks, Combos):
    1) Test that the count matches your expectations
        (recommend leaving the expected value as an expression)

        5*3 + 2*3 + 2*3

    2) Test that the collection contains all expected menu items



////////////////////////////////

Assert.Contains(collection, item => (some bool expression about item));


Example: see if "Drinks" contains a small unsweetened iced tea

Assert.Contains(Menu.Drinks, item => item is IcedTea tea && !tea.Sweet &&
                            tea.Size == SizeType.Small);





Would this work? not unless I override == (or similarly Equals)

Assert.Contains(Menu.Drinks, item => item == new IcedTea(){...});


///////////////////////////////

Not required to test IngredientItem collection


///////////////////////////////

Loop through enumerations (example, SizeType): 

foreach(SizeType size in Enum.GetValues<SizeType>()) {

}




///////////////////////////////

Combos:
    create a List of entrees, List of sides, List of drinks



Assert.Contains(Menu.Combos, item => 
        item is Combo c && c.SandwichChoice.GetType() == e.GetType() && ...)


(You aren't required to check anything more specific)



(You could also override Equals for Entree/Side/Drink and use that instead)

//////////////////////////////

UML:

- add static Menu class (show it is in SubHero.Data)
    how to show static? underline
    any "has-a" relationships? 
        an aggregation of IMenuItem
        an aggreation of IngredientItem





- add each page (Index, Privacy, About, Error) and mark the new namespace
    - look in each PageModel (code-behind) to see any properties/members
    - look for inheritance information




--> relationship between Menu and Index page?
    directed association point towards Menu




--> don't need Program.cs, _Layout.cshtml, ViewImports.cshtml



/////////////////////////

Styling the menu items.

Suggestion: have div around entrees, sides, drinks, combo sections

have a div around each menu item


css for entrees/sides/drinks/combos
    display: flex;
    flex-wrap: wrap;


css for menu item (gives length to item)
    flex-basis: 200px;