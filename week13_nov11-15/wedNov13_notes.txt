Milestone 10: due Friday


Recommended order of approach:
- Add About page and edit Privacy page
- Write the static Menu class
- Write the index page to get the menu information to *appear*
- Testing
- UML
- Styling

//////////////////////////////////


Testing: static Menu class

- For each type of menu item (Entrees, Sides, Drinks, Combos):
    --> test that the count matches your expectations
        (recommend leaving the expected value as an expression)



    --> test that the collection contains all expected menu
        items



Assert.Contains(collection, item => (some bool expression about item));


Example: see if "Drinks" contains a small unsweetened iced tea





///////////////////////////////

Not required to test IngredientItem collection


///////////////////////////////

Loop through enumerations (example, SizeType): 




///////////////////////////////

Combos:
    create a List of entrees, List of sides, List of drinks

Assert.Contains(Menu.Combos, item => 
        item is Combo c && c.SandwichChoice.GetType() == e.GetType() && ...)

(You aren't required to check anything more specific)

(You could also override Equals for Entree/Side/Drink and use that instead)

//////////////////////////////

UML:

- add static Menu class (show it is in SubHero.Data)
    how to show static? 
    any "has-a" relationships? 




- add each page (Index, Privacy, About, Error) and mark the new namespace
    - look in each PageModel to see any properties/members
    - look for inheritance information
    - what does the Index page *have*?




--> relationship between Menu and Index page?




--> don't need Program.cs, _Layout.cshtml, ViewImports.cshtml



/////////////////////////

Styling the menu items.

Suggestion: have divs for entrees, for sides, for drinks, for combos 

have a div for each menu item

.entrees, .sides, .drinks, .combos {
    display: flex;
    flex-wrap: wrap;
}

.menu-item {
    //this gives a length to the menu item
    flex-basis: 200px;
}